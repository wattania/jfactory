#!/bin/sh
#
# redis - this script starts and stops the redis-server daemon
#
# chkconfig: - 85 15
# description: Redis is a persistent key-value database
# processname: redis-server
# config: /home/wattana/push-server/etc/redis/redis.conf
# config: /etc/sysconfig/redis
# pidfile: /var/run/redis.pid

# Source function library.
. /etc/rc.d/init.d/functions

# Source networking configuration.
. /etc/sysconfig/network

# Check that networking is up.
[ "$NETWORKING" = "no" ] && exit 0
RUN_USER=root
REDIS_SERVER=/usr/local/bin/redis-server
REDIS_CONFIG_FILE=/etc/redis.conf
prog=$(basename $REDIS_SERVER)

[ -f /etc/sysconfig/redis ] && . /etc/sysconfig/redis

lockfile=/var/lock/subsys/redis

start() {
    if [ -x $REDIS_SERVER ];
    then
        echo "$REDIS_SERVER is executable ... OK"       
    else 
        echo "ERROR!! $REDIS_SERVER is not executable !"
        exit 5
    fi
   
    if [ -f $REDIS_CONFIG_FILE ]; 
    then
        echo "Config File [$REDIS_CONFIG_FILE] found ... OK"
    else
        echo "ERROR!! Config File [$REDIS_CONFIG_FILE] not found!"
        exit 6
    fi

    echo -n $"Starting $prog: "
    #daemon $REDIS_SERVER $REDIS_CONF_FILE
    daemon "su -l $RUN_USER -c '$REDIS_SERVER $REDIS_CONFIG_FILE'"
    retval=$?
    echo
    [ $retval -eq 0 ] && touch $lockfile
    return $retval
}

stop() {
    echo -n $"Stopping $prog: "
    killproc $prog -QUIT
    retval=$?
    echo
    [ $retval -eq 0 ] && rm -f $lockfile
    return $retval
}

restart() {
    stop
    start
}

reload() {
    echo -n $"Reloading $prog: "
    killproc $REDIS_SERVER -HUP
    RETVAL=$?
    echo
}

force_reload() {
    restart
}

rh_status() {
    status $prog
}

rh_status_q() {
    rh_status >/dev/null 2>&1
}

case "$1" in
    start)
        rh_status_q && exit 0
        $1
        ;;
    stop)
        rh_status_q || exit 0
        $1
        ;;
    restart|configtest)
        $1
        ;;
    reload)
        rh_status_q || exit 7
        $1
        ;;
    force-reload)
        force_reload
        ;;
    status)
        rh_status
        ;;
    condrestart|try-restart)
        rh_status_q || exit 0
;;
    *)
        echo $"Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload}"
        exit 2
esac

